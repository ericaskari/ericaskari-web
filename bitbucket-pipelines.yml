.SCRIPT_CONFIGURE_HOSTS: &SCRIPT_CONFIGURE_HOSTS |
    echo STEP: SCRIPT_CONFIGURE_HOSTS
# echo "172.17.0.1 ericaskari.com" >> /etc/hosts
.SCRIPT_CONFIGURE_KUBECTL: &SCRIPT_CONFIGURE_KUBECTL | #  USE AFTER SCRIPT_CONFIGURE_HOSTS
    echo STEP: SCRIPT_CONFIGURE_KUBECTL
    mkdir $HOME/.kube
    cp ./_ci/.kube/config $HOME/.kube/config
    sed -i='' -e "s|<CERTIFICATE_AUTHORITY_DATA>|$CERTIFICATE_AUTHORITY_DATA|" $HOME/.kube/config
    sed -i='' -e "s|<CLIENT_CERTIFICATE_DATA>|$CLIENT_CERTIFICATE_DATA|" $HOME/.kube/config
    sed -i='' -e "s|<CLIENT_KEY_DATA>|$CLIENT_KEY_DATA|" $HOME/.kube/config
    install -o root -g root -m 0755 ./_ci/.kube/kubectl /usr/local/bin/kubectl

.SCRIPT_CONFIGURE_AWS_CLI: &SCRIPT_CONFIGURE_AWS_CLI |
    echo STEP: SCRIPT_CONFIGURE_AWS_CLI
    unzip -q _ci/.aws/awscliv2.zip
    ./aws/install
    rm -rf .aws
    mkdir $HOME/.aws
    cp ./_ci/.aws/config $HOME/.aws/config
    cp ./_ci/.aws/credentials $HOME/.aws/credentials
    sed -i='' -e "s|<AWS_ACCESS_KEY_ID>|${AWS_ACCESS_KEY_ID}|" $HOME/.aws/credentials
    sed -i='' -e "s|<AWS_SECRET_ACCESS_KEY>|${AWS_SECRET_ACCESS_KEY}|" $HOME/.aws/credentials

.SCRIPT_CONFIGURE_DOCKER: &SCRIPT_CONFIGURE_DOCKER | #  USE AFTER SCRIPT_CONFIGURE_AWS_CLI
    echo STEP: SCRIPT_CONFIGURE_DOCKER
    docker login -u AWS -p $(aws ecr get-login-password --region eu-west-1) 438380764554.dkr.ecr.eu-west-1.amazonaws.com

.SCRIPT_CONFIGURE_YQ: &SCRIPT_INSTALL_YQ |
    cp ./_ci/.yq/yq_linux_amd64-v4.17.2 /usr/bin/yq && chmod +x /usr/bin/yq
    yq --version

.SCRIPT_INSTALL_NODEJS: &SCRIPT_INSTALL_NODEJS |
    source $NVM_DIR/nvm.sh
    nvm install lts/gallium
    node --version
    npm --version

definitions:
    caches:
        node: node_modules
    steps:
        - step: &STEP_GENERATE_DEV_RELEASE_VERSION
              name: Create.Dev.Release.Version
              image: atlassian/default-image:3
              runs-on:
                  - 'self.hosted'
              size: 2x
              services:
                  - docker
              script:
                  - *SCRIPT_CONFIGURE_AWS_CLI
                  - chmod +x ./_ci/scripts/STEP_GENERATE_DEV_RELEASE_VERSION.sh
                  - ./_ci/scripts/STEP_GENERATE_DEV_RELEASE_VERSION.sh
                  - echo $(cat .DEV_VERSION)
              artifacts:
                  - .DEV_VERSION
        - step: &STEP_GENERATE_PROD_RELEASE_VERSION
              name: Create.Prod.Release.Version
              image: atlassian/default-image:3
              runs-on:
                  - 'self.hosted'
              size: 2x
              services:
                  - docker
              script:
                  - *SCRIPT_CONFIGURE_AWS_CLI
                  - chmod +x ./_ci/scripts/STEP_GENERATE_PROD_RELEASE_VERSION.sh
                  - ./_ci/scripts/STEP_GENERATE_PROD_RELEASE_VERSION.sh
                  - echo $(cat .PROD_PULL_VERSION)
                  - echo $(cat .PROD_PUSH_VERSION)
              artifacts:
                  - .PROD_PULL_VERSION
                  - .PROD_PUSH_VERSION
        - step: &STEP_TEST_ALL
              name: All.Test
              image: atlassian/default-image:3
              runs-on:
                  - 'self.hosted'
              size: 2x
              caches:
                  - node
              script:
                  - *SCRIPT_INSTALL_NODEJS
                  - npm install
                  - npx nx run-many --target=test --all
        - step: &STEP_BUILD_ALL
              name: All.Build
              image: atlassian/default-image:3
              runs-on:
                  - 'self.hosted'
              size: 2x
              caches:
                  - node
              script:
                  - *SCRIPT_INSTALL_NODEJS
                  - npm install
                  - npx nx run-many --target=build --all
              artifacts:
                  - _dist/**
        - step: &STEP_BUILD_PUSH_DEV_DOCKER_FE
              name: FE.Build.Push.Dev.Docker
              image: atlassian/default-image:3
              runs-on:
                  - 'self.hosted'
              caches:
                  - docker
              size: 2x
              services:
                  - docker
              script:
                  - *SCRIPT_CONFIGURE_AWS_CLI
                  - *SCRIPT_CONFIGURE_DOCKER
                  - TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-frontend:$(cat .DEV_VERSION)"
                  - echo $TAG
                  - docker build -f ./_ci/Frontend.Dockerfile --tag "$TAG" .
                  - docker push "$TAG"
                  - echo "$(cat .DEV_VERSION)"           > ./.VERSION
              artifacts:
                  - .VERSION
        - step: &STEP_BUILD_PUSH_DEV_DOCKER_BE
              name: BE.Build.Push.Dev.Docker
              image: atlassian/default-image:3
              runs-on:
                  - 'self.hosted'
              caches:
                  - docker
              size: 2x
              services:
                  - docker
              script:
                  - *SCRIPT_CONFIGURE_AWS_CLI
                  - *SCRIPT_CONFIGURE_DOCKER
                  - TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-backend:$(cat .DEV_VERSION)"
                  - echo $TAG
                  - docker build -f ./_ci/Backend.Dockerfile --tag "$TAG" .
                  - docker push "$TAG"
                  - echo "$(cat .DEV_VERSION)"           > ./.VERSION
              artifacts:
                  - .VERSION
        - step: &STEP_PUSH_PROD_DOCKER_FE
              name: FE.Push.Prod.Docker
              image: atlassian/default-image:3
              runs-on:
                  - 'self.hosted'
              caches:
                  - docker
              size: 2x
              services:
                  - docker
              script:
                  - *SCRIPT_CONFIGURE_AWS_CLI
                  - *SCRIPT_CONFIGURE_DOCKER
                  - PULL_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-frontend:$(cat .PROD_PULL_VERSION)"
                  - PUSH_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-frontend:$(cat .PROD_PUSH_VERSION)"
                  - echo $PULL_TAG
                  - docker pull $PULL_TAG
                  - docker tag $PULL_TAG $PUSH_TAG
                  - docker push $PUSH_TAG
                  - echo "$(cat .PROD_PUSH_VERSION)"           > ./.VERSION
              artifacts:
                  - .VERSION
        - step: &STEP_PUSH_PROD_DOCKER_BE
              name: BE.Push.Prod.Docker
              image: atlassian/default-image:3
              runs-on:
                  - 'self.hosted'
              caches:
                  - docker
              size: 2x
              services:
                  - docker
              script:
                  - *SCRIPT_CONFIGURE_AWS_CLI
                  - *SCRIPT_CONFIGURE_DOCKER
                  - PULL_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-backend:$(cat .PROD_PULL_VERSION)"
                  - PUSH_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-backend:$(cat .PROD_PUSH_VERSION)"
                  - echo $PULL_TAG
                  - echo $PUSH_TAG
                  - docker pull $PULL_TAG
                  - docker tag $PULL_TAG $PUSH_TAG
                  - docker push $PUSH_TAG
                  - echo "$(cat .PROD_PUSH_VERSION)"           > ./.VERSION
              artifacts:
                  - .VERSION
        - step: &STEP_DEPLOY_TEST
              name: Deploy.Test
              image: atlassian/default-image:3
              deployment: Test
              runs-on:
                  - 'self.hosted'
              size: 2x
              services:
                  - docker
              script:
                  - *SCRIPT_CONFIGURE_HOSTS
                  - *SCRIPT_CONFIGURE_KUBECTL
                  - *SCRIPT_CONFIGURE_AWS_CLI
                  - *SCRIPT_CONFIGURE_DOCKER
                  - *SCRIPT_INSTALL_YQ
                  - cat .VERSION
                  - chmod +x ./_ci/scripts/STEP_DEPLOYMENT.sh
                  - ./_ci/scripts/STEP_DEPLOYMENT.sh
        - step: &STEP_DEPLOY_PROD
              name: Deploy.Prod
              image: atlassian/default-image:3
              deployment: Production
              runs-on:
                  - 'self.hosted'
              size: 2x
              services:
                  - docker
              script:
                  - *SCRIPT_CONFIGURE_HOSTS
                  - *SCRIPT_CONFIGURE_KUBECTL
                  - *SCRIPT_CONFIGURE_AWS_CLI
                  - *SCRIPT_CONFIGURE_DOCKER
                  - *SCRIPT_INSTALL_YQ
                  - cat .VERSION
                  - chmod +x ./_ci/scripts/STEP_DEPLOYMENT.sh
                  - ./_ci/scripts/STEP_DEPLOYMENT.sh
pipelines:
    branches:
        dev:
            - parallel:
                  - step: *STEP_GENERATE_DEV_RELEASE_VERSION # OUTPUTS: .DEV_VERSION
                  - step: *STEP_TEST_ALL # OUTPUTS:
                  - step: *STEP_BUILD_ALL # OUTPUTS: _dist/**
            - parallel:
                  - step: *STEP_BUILD_PUSH_DEV_DOCKER_FE # OUTPUTS: .VERSION
                  - step: *STEP_BUILD_PUSH_DEV_DOCKER_BE # OUTPUTS: .VERSION
            - step: *STEP_DEPLOY_TEST
        prod:
            - step: *STEP_GENERATE_PROD_RELEASE_VERSION # OUTPUTS: .PROD_PULL_VERSION   .PROD_PUSH_VERSION
            - parallel:
                  - step: *STEP_PUSH_PROD_DOCKER_FE # OUTPUTS: .VERSION
                  - step: *STEP_PUSH_PROD_DOCKER_BE # OUTPUTS: .VERSION
            - step: *STEP_DEPLOY_PROD
    pull-requests:
        dev:
            - parallel:
                  - step: *STEP_TEST_ALL
                  - step: *STEP_BUILD_ALL
        prod:
            - parallel:
                  - step: *STEP_TEST_ALL
                  - step: *STEP_BUILD_ALL
