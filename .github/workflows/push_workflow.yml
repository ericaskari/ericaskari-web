name: Docker Image Build
on:
  push:
    branches: [ dev, main ]
jobs:
  GenerateDevVersion:
    runs-on: self-hosted
    if: github.ref_name == 'dev'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3                                     # CONFIGURE_AWS_CLI
        with:
          python-version: "3.8"
      - uses: aws-actions/setup-sam@v2                                    # CONFIGURE_AWS_CLI
      - uses: aws-actions/configure-aws-credentials@v1                    # CONFIGURE_AWS_CLI
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - uses: actions/setup-node@v3                                       # INSTALL_NODEJS
        with:
          node-version: 16
      - uses: ./.github/workflows/generate-dev-version                    # OUTPUTS: .DEV_VERSION
      - name: Upload DEV_VERSION
        uses: actions/upload-artifact@v3
        with:
          name: DEV_VERSION
          path: .DEV_VERSION
      - name: debug
        shell: bash
        run: |
          echo DEV_VERSION: $(cat .DEV_VERSION)
  GenerateProdVersion:
    runs-on: self-hosted
    if: github.ref_name == 'main'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3                                     # CONFIGURE_AWS_CLI
        with:
          python-version: "3.8"
      - uses: aws-actions/setup-sam@v2                                    # CONFIGURE_AWS_CLI
      - uses: aws-actions/configure-aws-credentials@v1                    # CONFIGURE_AWS_CLI
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - uses: actions/setup-node@v3                                       # INSTALL_NODEJS
        with:
          node-version: 16
      - uses: ./.github/workflows/generate-prod-version                   # OUTPUTS: .PROD_PULL_VERSION   .PROD_PUSH_VERSION
      - name: debug
        shell: bash
        run: |
          echo PROD_PULL_VERSION: $(cat .PROD_PULL_VERSION)
          echo PROD_PUSH_VERSION: $(cat .PROD_PUSH_VERSION)
      - name: Upload PROD_PULL_VERSION
        uses: actions/upload-artifact@v3
        with:
          name: PROD_PULL_VERSION
          path: .PROD_PULL_VERSION
      - name: Upload PROD_PUSH_VERSION
        uses: actions/upload-artifact@v3
        with:
          name: PROD_PUSH_VERSION
          path: .PROD_PUSH_VERSION

  BuildAndTest:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3                                         # PULL_SOURCE_CODE
      - uses: actions/setup-node@v3                                       # INSTALL_NODEJS
        with:
          node-version: 16
      - name: Install dependencies
        shell: bash
        run: npm install
      - name: Test
        shell: bash
        run: npx nx run-many --target=test --all
      - name: Build
        shell: bash
        run: npx nx run-many --target=build --all
      - name: Upload _dist
        uses: actions/upload-artifact@v3
        with:
          name: _dist
          path: _dist

  BuildAndPushDevImages:
    needs: [GenerateDevVersion, BuildAndTest]
    if: github.ref_name == 'dev'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3                                     # CONFIGURE_AWS_CLI
        with:
          python-version: "3.8"
      - uses: aws-actions/setup-sam@v2                                    # CONFIGURE_AWS_CLI
      - uses: aws-actions/configure-aws-credentials@v1                    # CONFIGURE_AWS_CLI
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Debug
        shell: bash
        run: ls -la
      - name: Download DEV_VERSION
        uses: actions/download-artifact@v3
        with:
          name: DEV_VERSION
          path: .
      - name: Download _dist
        uses: actions/download-artifact@v3
        with:
          name: _dist
          path: _dist
      - name: Debug
        shell: bash
        run: ls -la
      - name: Login
        shell: bash
        run: docker login -u AWS -p $(aws ecr get-login-password --region eu-west-1) 438380764554.dkr.ecr.eu-west-1.amazonaws.com
      - name: Build And Push
        shell: bash
        run: |
          BE_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-backend:$(cat .DEV_VERSION)"
          FE_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-frontend:$(cat .DEV_VERSION)"
          echo BE_TAG: $BE_TAG
          echo FE_TAG: $FE_TAG
          docker build -f ./_ci/Backend.Dockerfile --tag "$BE_TAG" .
          docker build -f ./_ci/Frontend.Dockerfile --tag "$FE_TAG" .
          docker push "$BE_TAG"
          docker push "$FE_TAG"
          echo "$(cat .DEV_VERSION)"           > ./.VERSION
      - name: Upload VERSION
        uses: actions/upload-artifact@v3
        with:
          name: VERSION
          path: .VERSION

  BuildAndPushProdImages:
    needs: [GenerateProdVersion, BuildAndTest]
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3                                     # CONFIGURE_AWS_CLI
        with:
          python-version: "3.8"
      - uses: aws-actions/setup-sam@v2                                    # CONFIGURE_AWS_CLI
      - uses: aws-actions/configure-aws-credentials@v1                    # CONFIGURE_AWS_CLI
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Download PROD_PULL_VERSION
        uses: actions/download-artifact@v3
        with:
          name: PROD_PULL_VERSION
          path: .
      - name: Download PROD_PUSH_VERSION
        uses: actions/download-artifact@v3
        with:
          name: PROD_PUSH_VERSION
          path: .
      - name: Download _dist
        uses: actions/download-artifact@v3
        with:
          name: _dist
          path: .
      - name: Login
        shell: bash
        run: docker login -u AWS -p $(aws ecr get-login-password --region eu-west-1) 438380764554.dkr.ecr.eu-west-1.amazonaws.com

      - name: Pull And Push
        shell: bash
        run: |
          BE_PULL_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-backend:$(cat .PROD_PULL_VERSION)"
          BE_PUSH_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-backend:$(cat .PROD_PUSH_VERSION)"
          FE_PULL_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-frontend:$(cat .PROD_PULL_VERSION)"
          FE_PUSH_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-frontend:$(cat .PROD_PUSH_VERSION)"
          echo BE_PULL_TAG: $BE_PULL_TAG
          echo BE_PUSH_TAG: $BE_PUSH_TAG
          echo FE_PULL_TAG: $FE_PULL_TAG
          echo FE_PUSH_TAG: $FE_PUSH_TAG
          docker pull $BE_PULL_TAG
          docker pull $FE_PULL_TAG
          docker tag $BE_PULL_TAG $BE_PUSH_TAG
          docker tag $FE_PULL_TAG $FE_PUSH_TAG
          docker push $BE_PUSH_TAG
          docker push $FE_PUSH_TAG
          echo "$(cat .PROD_PUSH_VERSION)"           > ./.VERSION
      - name: Upload VERSION
        uses: actions/upload-artifact@v3
        with:
          name: VERSION
          path: .VERSION

  DeployToTest:
    runs-on: self-hosted
    needs: [BuildAndPushDevImages]
    if: github.ref_name == 'dev'
    environment: development
    env:
      BE_DOMAIN: ${{ secrets.BE_DOMAIN }}
      FE_DOMAIN_ONE: ${{ secrets.FE_DOMAIN_ONE }}
      FE_DOMAIN_TWO: ${{ secrets.FE_DOMAIN_TWO }}
      NAMESPACE: ${{ secrets.NAMESPACE }}
    steps:
      - uses: actions/checkout@v3                                         # PULL_SOURCE_CODE
      - uses: actions/setup-python@v3                                     # CONFIGURE_AWS_CLI
        with:
          python-version: "3.8"
      - uses: aws-actions/setup-sam@v2                                    # CONFIGURE_AWS_CLI
      - uses: aws-actions/configure-aws-credentials@v1                    # CONFIGURE_AWS_CLI
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - uses: ./.github/workflows/configure-kubectl                    # CONFIGURE_KUBECTL
        with:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      - run: cp ./_ci/.yq/yq_linux_amd64-v4.17.2 /usr/bin/yq && chmod +x /usr/bin/yq # CONFIGURE_YQ
        shell: bash
      - run: yq --version
        shell: bash
      - name: Download VERSION
        uses: actions/download-artifact@v3
        with:
          name: VERSION
          path: .
      - run: cat .VERSION
        shell: bash
      - run: kubectl get all
        shell: bash
      - run: chmod +x ./_ci/scripts/STEP_DEPLOYMENT.sh
        shell: bash
      - run: ./_ci/scripts/STEP_DEPLOYMENT.sh
        shell: bash

  DeployToProd:
    runs-on: self-hosted
    needs: [BuildAndPushProdImages]
    if: github.ref_name == 'main'
    environment: production
    env:
      BE_DOMAIN: ${{ secrets.BE_DOMAIN }}
      FE_DOMAIN_ONE: ${{ secrets.FE_DOMAIN_ONE }}
      FE_DOMAIN_TWO: ${{ secrets.FE_DOMAIN_TWO }}
      NAMESPACE: ${{ secrets.NAMESPACE }}
    steps:
      - uses: actions/checkout@v3                                         # PULL_SOURCE_CODE
      - uses: actions/setup-python@v3                                     # CONFIGURE_AWS_CLI
        with:
          python-version: "3.8"
      - uses: aws-actions/setup-sam@v2                                    # CONFIGURE_AWS_CLI
      - uses: aws-actions/configure-aws-credentials@v1                    # CONFIGURE_AWS_CLI
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - uses: ./.github/workflows/configure-kubectl                    # CONFIGURE_KUBECTL
        with:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      - run: cp ./_ci/.yq/yq_linux_amd64-v4.17.2 /usr/bin/yq && chmod +x /usr/bin/yq # CONFIGURE_YQ
        shell: bash
      - run: yq --version
        shell: bash
      - name: Download VERSION
        uses: actions/download-artifact@v3
        with:
          name: VERSION
          path: .
      - run: cat .VERSION
        shell: bash
      - run: kubectl get all
        shell: bash
      - run: chmod +x ./_ci/scripts/STEP_DEPLOYMENT.sh
        shell: bash
      - run: ./_ci/scripts/STEP_DEPLOYMENT.sh
        shell: bash
