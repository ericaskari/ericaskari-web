name: Docker Image Build
on:
    push:
        #    branches: [ dev, main ]
        branches: [main]
jobs:
    GenerateProdVersion:
        runs-on: self-hosted
        # if: github.ref_name == 'main'
        steps:
            - uses: actions/checkout@v3
            - uses: ./.github/workflows/configure-awscli # CONFIGURE_AWS_CLI
              with:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_REGION: ${{ secrets.AWS_REGION }}
            - uses: actions/setup-node@v3 # INSTALL_NODEJS
              with:
                  node-version: 16
            - uses: ./.github/workflows/generate-prod-version # OUTPUTS: .PROD_PULL_VERSION   .PROD_PUSH_VERSION
            - name: Debug
              shell: bash
              run: |
                  echo PROD_PULL_VERSION: $(cat .PROD_PULL_VERSION)
                  echo PROD_PUSH_VERSION: $(cat .PROD_PUSH_VERSION)
            - name: Upload PROD_PULL_VERSION
              uses: actions/upload-artifact@v3
              with:
                  name: PROD_PULL_VERSION
                  path: .PROD_PULL_VERSION
            - name: Upload PROD_PUSH_VERSION
              uses: actions/upload-artifact@v3
              with:
                  name: PROD_PUSH_VERSION
                  path: .PROD_PUSH_VERSION
            - name: Upload DEV_VERSION
              uses: actions/upload-artifact@v3
              with:
                  name: DEV_VERSION
                  path: .DEV_VERSION

    BuildAndTest:
        runs-on: self-hosted
        steps:
            - uses: actions/checkout@v3 # PULL_SOURCE_CODE
            - uses: actions/setup-node@v3 # INSTALL_NODEJS
              with:
                  node-version: 16
            - name: Install dependencies
              shell: bash
              run: npm install
            - name: Test
              shell: bash
              run: npm run test:all
            - name: Build
              shell: bash
              run: npm run build:all
            - name: Upload dist
              uses: actions/upload-artifact@v3
              with:
                  name: dist
                  path: dist
    BuildAndPushDevImages:
        needs: [GenerateProdVersion, BuildAndTest]
        #if: github.ref_name == 'dev'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: ./.github/workflows/configure-awscli # CONFIGURE_AWS_CLI
              with:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_REGION: ${{ secrets.AWS_REGION }}
            - name: Debug
              shell: bash
              run: ls -la
            - name: Download DEV_VERSION
              uses: actions/download-artifact@v3
              with:
                  name: DEV_VERSION
                  path: .
            - name: Download dist
              uses: actions/download-artifact@v3
              with:
                  name: dist
                  path: dist
            - name: Debug
              shell: bash
              run: ls -la
            - name: Login
              shell: bash
              run: docker login -u AWS -p $(aws ecr get-login-password --region eu-west-1) 438380764554.dkr.ecr.eu-west-1.amazonaws.com
            - name: Build And Push
              shell: bash
              run: |
                  BE_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-backend:$(cat .DEV_VERSION)"
                  FE_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-frontend:$(cat .DEV_VERSION)"
                  echo BE_TAG: $BE_TAG
                  echo FE_TAG: $FE_TAG
                  docker build -f ./.github/Backend.Dockerfile --build-arg APP_BUILD_VERSION="$(cat .DEV_VERSION)" --tag "$BE_TAG" .
                  docker build -f ./.github/Frontend.Dockerfile --build-arg APP_BUILD_VERSION="$(cat .DEV_VERSION)" --tag "$FE_TAG" .
                  docker push "$BE_TAG"
                  docker push "$FE_TAG"
                  echo "$(cat .DEV_VERSION)"           > ./.VERSION
            - name: Upload VERSION
              uses: actions/upload-artifact@v3
              with:
                  name: VERSION
                  path: .VERSION

    DeployToProd:
        runs-on: self-hosted
        # needs: [BuildAndPushProdImages]
        needs: [BuildAndPushDevImages]
        if: github.ref_name == 'main'
        environment: production
        steps:
            - uses: actions/checkout@v3 # PULL_SOURCE_CODE
            - uses: ./.github/workflows/configure-awscli # CONFIGURE_AWS_CLI
              with:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_REGION: ${{ secrets.AWS_REGION }}
            - uses: ./.github/workflows/configure-kubectl # CONFIGURE_KUBECTL
              with:
                  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
            - run: sudo sh -c 'cp ./.github/tools/.yq/yq_linux_amd64-v4.17.2 /usr/bin/yq && chmod +x /usr/bin/yq' # CONFIGURE_YQ
              shell: bash
            - run: yq --version
              shell: bash
            - name: Download VERSION
              uses: actions/download-artifact@v3
              with:
                name: VERSION
                path: .
            - run: cat .VERSION
              shell: bash
            - uses: ./.github/workflows/deploy # CONFIGURE_AWS_CLI
              with:
                APP_NAMESPACE: ericaskari-prod
                APP_NODE_ENV: production
                APP_HOST_NAME: www.ericaskari.com
                APP_ENABLE_SWAGGER: false
                APP_NODE_MAILER_HOST: smtppro.zoho.eu
                APP_NODE_MAILER_PORT: 465
                APP_NODE_MAILER_REJECT_UNAUTHORIZED: true
                APP_NODE_MAILER_AUTH_USER: ${{ secrets.APP_NODE_MAILER_AUTH_USER }}
                APP_NODE_MAILER_AUTH_PASS: ${{ secrets.APP_NODE_MAILER_AUTH_PASS }}
                APP_NODE_MAILER_SECURE: true
                APP_IS_SSL_ENABLED: true
                APP_GOOGLE_TAG_MANAGER_ID: GTM-MXC7C6F
                APP_FE_DOMAIN_ONE: ericaskari.com
                APP_FE_DOMAIN_TWO: www.ericaskari.com
    DeployToDev:
        runs-on: self-hosted
        # needs: [BuildAndPushProdImages]
        needs: [BuildAndPushDevImages]
        if: github.ref_name == 'main'
        environment: development
        steps:
            - uses: actions/checkout@v3 # PULL_SOURCE_CODE
            - uses: ./.github/workflows/configure-awscli # CONFIGURE_AWS_CLI
              with:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_REGION: ${{ secrets.AWS_REGION }}
            - uses: ./.github/workflows/configure-kubectl # CONFIGURE_KUBECTL
              with:
                  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
            - run: sudo sh -c 'cp ./.github/tools/.yq/yq_linux_amd64-v4.17.2 /usr/bin/yq && chmod +x /usr/bin/yq' # CONFIGURE_YQ
              shell: bash
            - run: yq --version
              shell: bash
            - name: Download VERSION
              uses: actions/download-artifact@v3
              with:
                  name: VERSION
                  path: .
            - run: cat .VERSION
              shell: bash
            - run: kubectl get all
              shell: bash
            - uses: ./.github/workflows/deploy # CONFIGURE_AWS_CLI
              with:
                APP_NAMESPACE: ericaskari-dev
                APP_NODE_ENV: development
                APP_HOST_NAME: test.ericaskari.com
                APP_ENABLE_SWAGGER: true
                APP_NODE_MAILER_HOST: smtppro.zoho.eu
                APP_NODE_MAILER_PORT: 465
                APP_NODE_MAILER_REJECT_UNAUTHORIZED: true
                APP_NODE_MAILER_AUTH_USER: ${{ secrets.APP_NODE_MAILER_AUTH_USER }}
                APP_NODE_MAILER_AUTH_PASS: ${{ secrets.APP_NODE_MAILER_AUTH_PASS }}
                APP_NODE_MAILER_SECURE: true
                APP_IS_SSL_ENABLED: true
                APP_GOOGLE_TAG_MANAGER_ID: GTM-W5235KZ
                APP_FE_DOMAIN_ONE: test.ericaskari.com
                APP_FE_DOMAIN_TWO: staging.ericaskari.com
