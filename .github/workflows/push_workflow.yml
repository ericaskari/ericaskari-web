name: Docker Image Build
on:
    push:
        #    branches: [ dev, main ]
        branches: [main]
jobs:
    GenerateProdVersion:
        runs-on: self-hosted
        # if: github.ref_name == 'main'
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-python@v3 # CONFIGURE_AWS_CLI
              with:
                  python-version: '3.8'
            - uses: aws-actions/setup-sam@v2 # CONFIGURE_AWS_CLI
            - uses: aws-actions/configure-aws-credentials@v1 # CONFIGURE_AWS_CLI
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-1
            - uses: actions/setup-node@v3 # INSTALL_NODEJS
              with:
                  node-version: 16
            - uses: ./.github/workflows/generate-prod-version # OUTPUTS: .PROD_PULL_VERSION   .PROD_PUSH_VERSION
            - name: Debug
              shell: bash
              run: |
                  echo PROD_PULL_VERSION: $(cat .PROD_PULL_VERSION)
                  echo PROD_PUSH_VERSION: $(cat .PROD_PUSH_VERSION)
            - name: Upload PROD_PULL_VERSION
              uses: actions/upload-artifact@v3
              with:
                  name: PROD_PULL_VERSION
                  path: .PROD_PULL_VERSION
            - name: Upload PROD_PUSH_VERSION
              uses: actions/upload-artifact@v3
              with:
                  name: PROD_PUSH_VERSION
                  path: .PROD_PUSH_VERSION
            - name: Upload DEV_VERSION
              uses: actions/upload-artifact@v3
              with:
                  name: DEV_VERSION
                  path: .DEV_VERSION

    BuildAndTest:
        runs-on: self-hosted
        steps:
            - uses: actions/checkout@v3 # PULL_SOURCE_CODE
            - uses: actions/setup-node@v3 # INSTALL_NODEJS
              with:
                  node-version: 16
            - name: Install dependencies
              shell: bash
              run: npm install
            - name: Test
              shell: bash
              run: npx nx run-many --target=test --all
            - name: Build
              shell: bash
              run: npx nx run-many --target=build --all
            - name: Upload _dist
              uses: actions/upload-artifact@v3
              with:
                  name: _dist
                  path: _dist
    BuildAndPushDevImages:
        needs: [GenerateProdVersion, BuildAndTest]
        #if: github.ref_name == 'dev'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-python@v3 # CONFIGURE_AWS_CLI
              with:
                  python-version: '3.8'
            - uses: aws-actions/setup-sam@v2 # CONFIGURE_AWS_CLI
            - uses: aws-actions/configure-aws-credentials@v1 # CONFIGURE_AWS_CLI
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-1
            - name: Debug
              shell: bash
              run: ls -la
            - name: Download DEV_VERSION
              uses: actions/download-artifact@v3
              with:
                  name: DEV_VERSION
                  path: .
            - name: Download _dist
              uses: actions/download-artifact@v3
              with:
                  name: _dist
                  path: _dist
            - name: Debug
              shell: bash
              run: ls -la
            - name: Login
              shell: bash
              run: docker login -u AWS -p $(aws ecr get-login-password --region eu-west-1) 438380764554.dkr.ecr.eu-west-1.amazonaws.com
            - name: Build And Push
              shell: bash
              run: |
                  BE_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-backend:$(cat .DEV_VERSION)"
                  FE_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-frontend:$(cat .DEV_VERSION)"
                  echo BE_TAG: $BE_TAG
                  echo FE_TAG: $FE_TAG
                  docker build -f ./.github/Backend.Dockerfile --build-arg BUILD_VERSION="$(cat .DEV_VERSION)" --tag "$BE_TAG" .
                  docker build -f ./.github/Frontend.Dockerfile --build-arg BUILD_VERSION="$(cat .DEV_VERSION)" --tag "$FE_TAG" .
                  docker push "$BE_TAG"
                  docker push "$FE_TAG"
                  echo "$(cat .DEV_VERSION)"           > ./.VERSION
            - name: Upload VERSION
              uses: actions/upload-artifact@v3
              with:
                  name: VERSION
                  path: .VERSION

    DeployToProd:
        runs-on: self-hosted
        # needs: [BuildAndPushProdImages]
        needs: [BuildAndPushDevImages]
        if: github.ref_name == 'main'
        environment: production
        steps:
            - uses: actions/checkout@v3 # PULL_SOURCE_CODE
            - uses: actions/setup-python@v3 # CONFIGURE_AWS_CLI
              with:
                  python-version: '3.8'
            - uses: aws-actions/setup-sam@v2 # CONFIGURE_AWS_CLI
            - uses: aws-actions/configure-aws-credentials@v1 # CONFIGURE_AWS_CLI
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-1
            - uses: ./.github/workflows/configure-kubectl # CONFIGURE_KUBECTL
              with:
                  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
            - run: cp ./.github/tools/.yq/yq_linux_amd64-v4.17.2 /usr/bin/yq && chmod +x /usr/bin/yq # CONFIGURE_YQ
              shell: bash
            - run: yq --version
              shell: bash
            - name: Download VERSION
              uses: actions/download-artifact@v3
              with:
                  name: VERSION
                  path: .
            - run: cat .VERSION
              shell: bash
            - run: kubectl get all
              shell: bash
            - run: |
                  # Assign Env variables Backend       
                  yq e -i '.spec.template.spec.containers[0].env += [{"name": "NODE_ENV",               "value": "production"}]'                          ./.github/deployment/backend-02-deployment.yml
                  yq e -i '.spec.template.spec.containers[0].env += [{"name": "ENABLE_SWAGGER",         "value": "${{secrets.ENABLE_SWAGGER}}"}]'         ./.github/deployment/backend-02-deployment.yml
                  yq e -i '.spec.template.spec.containers[0].env += [{"name": "ENABLE_MIGRATIONS",      "value": "${{secrets.ENABLE_MIGRATIONS}}"}]'      ./.github/deployment/backend-02-deployment.yml
                  yq e -i '.spec.template.spec.containers[0].env += [{"name": "NODE_MAILER_HOST",       "value": "${{secrets.NODE_MAILER_HOST}}"}]'       ./.github/deployment/backend-02-deployment.yml
                  yq e -i '.spec.template.spec.containers[0].env += [{"name": "NODE_MAILER_PORT",       "value": "${{secrets.NODE_MAILER_PORT}}"}]'       ./.github/deployment/backend-02-deployment.yml
                  yq e -i '.spec.template.spec.containers[0].env += [{"name": "NODE_MAILER_ENABLE_SSL", "value": "${{secrets.NODE_MAILER_ENABLE_SSL}}"}]' ./.github/deployment/backend-02-deployment.yml
                  yq e -i '.spec.template.spec.containers[0].env += [{"name": "NODE_MAILER_AUTH_USER",  "value": "${{secrets.NODE_MAILER_AUTH_USER}}"}]'  ./.github/deployment/backend-02-deployment.yml
                  yq e -i '.spec.template.spec.containers[0].env += [{"name": "NODE_MAILER_AUTH_PASS",  "value": "${{secrets.NODE_MAILER_AUTH_PASS}}"}]'  ./.github/deployment/backend-02-deployment.yml
                  yq e -i '.spec.template.spec.containers[0].env += [{"name": "NODE_MAILER_SECURE",     "value": "${{secrets.NODE_MAILER_SECURE}}"}]'     ./.github/deployment/backend-02-deployment.yml

                  # Assign container images          
                  export VERSION="$(cat .VERSION)"
                  export FE_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-frontend:$VERSION"
                  export BE_TAG="438380764554.dkr.ecr.eu-west-1.amazonaws.com/ericaskari-backend:$VERSION"
                  yq e -i '.spec.template.spec.containers[0].image=env(BE_TAG)'                                                                           ./.github/deployment/backend-02-deployment.yml
                  yq e -i ".spec.template.spec.containers[0].image=env(FE_TAG)"                                                                           ./.github/deployment/frontend-02-deployment.yml

                  # Other configurations          
                  yq e -i '.spec.tls[0].hosts[0]="${{secrets.FE_DOMAIN_ONE}}"'                                                                            ./.github/deployment/frontend-04-ingress.yml
                  yq e -i '.spec.tls[0].hosts[1]="${{secrets.FE_DOMAIN_TWO}}"'                                                                            ./.github/deployment/frontend-04-ingress.yml
                  yq e -i '.spec.rules[0].host="${{secrets.FE_DOMAIN_ONE}}"'                                                                              ./.github/deployment/frontend-04-ingress.yml
                  yq e -i '.spec.rules[1].host="${{secrets.FE_DOMAIN_TWO}}"'                                                                              ./.github/deployment/frontend-04-ingress.yml
              shell: bash
            - run: |
                  kubectl create namespace "${{ secrets.NAMESPACE }}" || true
                  kubectl delete secret --namespace="${{ secrets.NAMESPACE }}" regcred || true
                  kubectl create secret docker-registry regcred --namespace="${{ secrets.NAMESPACE }}" --docker-server=438380764554.dkr.ecr.eu-west-1.amazonaws.com --docker-username=AWS --docker-password="$(aws ecr get-login-password)" || true
                  #kubectl apply  --namespace="${{ secrets.NAMESPACE }}" --filename=./.github/deployment/shared-01-mirror-secret-production.yaml
                  kubectl apply   --namespace="${{ secrets.NAMESPACE }}" --filename=./.github/deployment/backend-01-secret.yml
                  kubectl apply   --namespace="${{ secrets.NAMESPACE }}" --filename=./.github/deployment/backend-02-deployment.yml
                  kubectl apply   --namespace="${{ secrets.NAMESPACE }}" --filename=./.github/deployment/backend-03-service.yml
                  kubectl apply   --namespace="${{ secrets.NAMESPACE }}" --filename=./.github/deployment/frontend-01-secret.yml
                  kubectl apply   --namespace="${{ secrets.NAMESPACE }}" --filename=./.github/deployment/frontend-02-deployment.yml
                  kubectl apply   --namespace="${{ secrets.NAMESPACE }}" --filename=./.github/deployment/frontend-03-service.yml
                  kubectl apply   --namespace="${{ secrets.NAMESPACE }}" --filename=./.github/deployment/frontend-04-ingress.yml
                  kubectl apply   --namespace="${{ secrets.NAMESPACE }}" --filename=./.github/deployment/frontend-05-redirect.yml
              shell: bash
