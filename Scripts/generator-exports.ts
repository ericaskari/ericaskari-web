import { readdirSync, readFileSync, writeFileSync } from 'fs';
import { parse, resolve } from 'path';
import { getClassNameFromFileData, getInterfaceNameFromFileData } from './shared-script';

function log(text: string) {
    console.log(' ðŸ›  ', text);
}

const autoGeneratedMessage = '// Auto generated file with generate:exports npm command';

{
    // @ts-ignore
    function run(readDir: string, autogeneratedFile: string, dirName: string, arrayName: string) {
        const fileNames = readdirSync(readDir);

        const filesData = fileNames.map((m) => readFileSync(resolve(readDir, m)).toString());

        const classNames = filesData.map((m) => getClassNameFromFileData(m));
        const interfaceNames = filesData.map((m) => getInterfaceNameFromFileData(m));

        const classNameImports = classNames
            .map((migrationClassName: string | null, index: number) => {
                const fileName = fileNames[index].replace('.ts', '');
                if (migrationClassName === null) {
                    return null;
                }
                return `import { ${migrationClassName} } from './${dirName}/${fileName}';`;
            })
            .filter((x) => !!x)
            .join('\n');

        const interfaceImports = interfaceNames
            .map((migrationClassName: string | null, index: number) => {
                const fileName = fileNames[index].replace('.ts', '');
                if (migrationClassName === null) {
                    return null;
                }

                return `import { ${migrationClassName} } from './models/${fileName}';`;
            })
            .filter((x) => !!x)
            .join('\n');

        const indent = '    ';

        const classNamesConstants = classNames.filter((x) => !!x).join(`,\n${indent}`);

        const classNameExports = classNames
            .filter((x) => !!x)
            .map((className) => `export { ${className} };`)
            .join('\n');
        const interfaceExports = interfaceNames
            .filter((x) => !!x)
            .map((className) => `export { ${className} };`)
            .join('\n');

        const exportedArray = `export const ${arrayName} = [\n${indent}${classNamesConstants}\n];`;

        const comment = autoGeneratedMessage;

        const final = `// noinspection ES6PreferShortImport\n\n${classNameImports}\n\n${interfaceImports}\n\n${comment}\n\n${classNameExports}\n\n${interfaceExports}\n\n${exportedArray}`;

        writeFileSync(autogeneratedFile, final);
    }

    log('Generating exports for Lib.Shared.Model models export');

    run(
        resolve(process.cwd(), 'Lib.Shared.Model/src/models'),
        resolve(process.cwd(), 'Lib.Shared.Model/src/autogenerated-model-exports.ts'),
        'models',
        'models'
    );

    log('Generating exports for Lib.Shared.Model request export');
    log('Generating exports for Lib.Shared.Model response export');

    run(
        resolve(process.cwd(), 'Lib.Shared.Model/src/request-responses'),
        resolve(process.cwd(), 'Lib.Shared.Model/src/autogenerated-request-responses-exports.ts'),
        'request-responses',
        'requestResponseModels'
    );
}

log('Successfully generated.');
